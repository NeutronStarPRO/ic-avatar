type Result_1 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProfileUpdate = 
 record {
   bio: Bio;
   image: opt Image;
 };
type Profile = 
 record {
   bio: Bio;
   id: principal;
   image: opt Image;
 };
type Image = 
 record {
   data: blob;
   fileName: text;
   filetype: text;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Error = 
 variant {
   AlreadyExists;
   NotAuthorized;
   NotFound;
 };
type Bio = 
 record {
   about: opt text;
   displayName: opt text;
   familyName: opt text;
   givenName: opt text;
   location: opt text;
   name: opt text;
 };
service : {
  create: (ProfileUpdate) -> (Result);
  delete: () -> (Result);
  http_request: (HttpRequest) -> (HttpResponse) query;
  read: () -> (Result_1);
  update: (ProfileUpdate) -> (Result);
}
